name: Build Nginx Based on LDD Version

on:
  workflow_dispatch:
    inputs:
      ldd_version:
        description: "Specify the ldd version (e.g., 2.12, 2.17, 2.28, 2.34)"
        required: true
        default: "2.28"
      nginx_version:
        description: "Specify the nginx version"
        required: true
        default: "1.26.2"
      openssl_version:
        required: true
        default: "openssl-3.3.0+quic"
      pcre2_version:
        required: true
        default: "10.44"
      geoip2_version:
        required: true
        default: "3.4"
      nginx_sticky_version:
        required: true
        default: "1.2.6"
      headers_more_version:
        required: true
        default: "v0.37"
      prefix:
        required: true
        default: "/usr/local/nginx"

jobs:
  build-nginx:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set system version based on ldd version
      id: set-system
      run: |
        case "${{ github.event.inputs.ldd_version }}" in
          "2.12")
            echo "SYSTEM_VERSION=6" >> $GITHUB_ENV
            ;;
          "2.17")
            echo "SYSTEM_VERSION=7" >> $GITHUB_ENV
            ;;
          "2.28")
            echo "SYSTEM_VERSION=8" >> $GITHUB_ENV
            ;;
          "2.34")
            echo "SYSTEM_VERSION=9" >> $GITHUB_ENV
            ;;
          *)
            echo "Unsupported ldd version: ${{ github.event.inputs.ldd_version }}"
            exit 1
            ;;
        esac

    - name: Pull Docker image for chosen system
      run: |
        docker pull almalinux:${{ env.SYSTEM_VERSION }}

    - name: Run Docker container and build Nginx
      run: |
        docker run --rm -v ${{ github.workspace }}:/opt/nginx alpine:latest /bin/sh -c "
          apk upgrade --no-cache -a && \
          apk add --no-cache ca-certificates build-base cmake git libtool autoconf automake perl bash \
          libatomic_ops-dev zlib-dev luajit-dev pcre2-dev linux-headers yajl-dev libxml2-dev libxslt-dev curl-dev lmdb-dev libfuzzy2-dev lua5.1-dev lmdb-dev geoip-dev libmaxminddb-dev &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/quictls/openssl.git openssl &&

          cd /opt/nginx &&
          git clone --recursive --branch "${{ github.event.inputs.headers_more_version }}" https://github.com/openresty/headers-more-nginx-module headers-more-nginx-module &&
          git clone --recursive --branch "${{ github.event.inputs.geoip2_version }}" https://github.com/leev/ngx_http_geoip2_module ngx_http_geoip2_module &&
          git clone --depth 1 https://github.com/cloudflare/zlib.git &&
          cd zlib && ./configure &&

          cd /opt/nginx &&
          wget https://github.com/Refinitiv/nginx-sticky-module-ng/archive/refs/tags/${{ github.event.inputs.nginx_sticky_version }}.tar.gz &&
          tar xf ${{ github.event.inputs.nginx_sticky_version }}.tar.gz &&
          mv nginx-sticky-module-ng-${{ github.event.inputs.nginx_sticky_version }} nginx-sticky-module &&
          sed -i 's@ngx_http_parse_multi_header_lines.*@ngx_http_parse_multi_header_lines(r, r->headers_in.cookie, \&iphp->sticky_conf->cookie_name, \&route) != NULL){@g' nginx-sticky-module/ngx_http_sticky_module.c &&
          sed -i '12a #include <openssl/sha.h>' nginx-sticky-module/ngx_http_sticky_misc.c &&
          sed -i '12a #include <openssl/md5.h>' nginx-sticky-module/ngx_http_sticky_misc.c && 


          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/google/ngx_brotli.git ngx_brotli &&
          cd ngx_brotli && git submodule update --init &&

          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/facebook/zstd.git zstd &&
          cd zstd && make -j$(nproc) && make install && make clean &&
          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/tokers/zstd-nginx-module.git ngx_zstd &&
          
          cd /opt/nginx &&
          git clone --depth 1 --recurse-submodules https://github.com/PCRE2Project/pcre2.git pcre2 &&
          cd pcre2 && ./autogen.sh && ./configure && make -j$(nproc) && make install && make clean &&

          cd /opt/nginx &&
          wget https://nginx.org/download/nginx-${{ github.event.inputs.nginx_version }}.tar.gz &&
          tar -zxvf nginx-${{ github.event.inputs.nginx_version }}.tar.gz && cd nginx-${{ github.event.inputs.nginx_version }} &&
          git clone --depth 1 --recurse-submodules https://github.com/zhouchangxun/ngx_healthcheck_module.git  ngx_healthcheck_module &&
          wget https://raw.githubusercontent.com/nginx-modules/ngx_http_tls_dyn_size/refs/heads/master/nginx__dynamic_tls_records_1.25.1%2B.patch -O dynamic_tls_records.patch &&
          patch -p1 < ./dynamic_tls_records.patch &&
          patch -p1 < ./ngx_healthcheck_module/nginx_healthcheck_for_nginx_1.19+.patch &&
          sed -i  's@"nginx/"@" "@g' src/core/nginx.h &&
          sed -i  's@"nginx version: "@" "@g' src/core/nginx.c &&
          sed -i  's@r->headers_out.server == NULL@0@g' src/http/ngx_http_header_filter_module.c &&
          sed -i  's@r->headers_out.server == NULL@0@g' src/http/v2/ngx_http_v2_filter_module.c &&
          sed -i  's@r->headers_out.server == NULL@0@g' src/http/v3/ngx_http_v3_filter_module.c &&
          sed -i  's@<hr><center>nginx</center>@@g' src/http/ngx_http_special_response.c &&
          sed -i  's@NGINX_VERSION      ".*"@NGINX_VERSION      " "@g' src/core/nginx.h && 
          ./configure --prefix=${{ github.event.inputs.prefix }} --conf-path=${{ github.event.inputs.prefix }}/conf/nginx.conf --with-threads --with-file-aio --with-http_v2_module --with-http_v3_module --with-http_ssl_module \
                      --with-http_sub_module --with-http_slice_module --with-http_realip_module --with-http_degradation_module \
                      --with-http_stub_status_module --with-pcre-jit --with-pcre=../pcre2 --with-stream --with-stream_ssl_module \
                      --add-module=../ngx_http_geoip2_module --add-module=../headers-more-nginx-module --add-module=./ngx_healthcheck_module  \
                      --with-stream_ssl_preread_module --with-zlib=../zlib --with-openssl=../openssl --add-module=../nginx-sticky-module --add-module=../ngx_zstd --add-module=../ngx_brotli \
                      --with-openssl-opt='no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 enable-tls1_3 enable-quic' --with-cc-opt='-static -s' --with-ld-opt=-static &&
          make -j$(nproc) && objs/./nginx -V &> /opt/nginx/nginx_build_info.txt && make install &&
          cd ${{ github.event.inputs.prefix }} && cd ../ &&  strip -s nginx/sbin/nginx && zip -r nginx.zip nginx && mv nginx.zip /opt/nginx/ 
        "

    - name: Upload Nginx binary and build information to repository
      uses: actions/upload-artifact@v4
      with:
        name: nginx_artifacts
        path: |
          ${{ github.workspace }}/nginx.zip
          ${{ github.workspace }}/nginx_build_info.txt
